name: Build Modules
on:
  workflow_call:
    inputs:
      from_ci:
        type: boolean
        required: false
        default: true
  push:
    branches:
      - main
      - test
  workflow_dispatch:

jobs:
 build_rvx_orig:
   runs-on: ubuntu-latest
   steps:
     - name: Checkout
       uses: actions/checkout@v4
       with:
         fetch-depth: 0
         submodules: true

     - name: Set up Java
       uses: actions/setup-java@v4
       with:
         distribution: "zulu"
         java-version: "17"

     - name: Update config
       if: ${{ inputs.from_ci }}
       run: |
         if git checkout origin/update build.md; then
           UPDATE_CFG=$(./build.sh config.toml --config-update)
           if [ "$UPDATE_CFG" ]; then
             echo "$UPDATE_CFG" > config.toml
           fi
         fi

     - name: Get next version code
       id: next_ver_code
       env:
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
         TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
         if [ -z "$TAG" ]; then TAG=0; fi
         echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT

     - name: Build modules/APKs
       run: ./build.sh config.toml original options.json
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         GITHUB_REPOSITORY: ${{ github.repository }}
         NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

     - name: Get output
       id: get_output
       run: |
         DELIM="$(openssl rand -hex 8)"
         echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
         cat build.md >> "$GITHUB_OUTPUT"
         echo "${DELIM}" >> "$GITHUB_OUTPUT"
         cp -f build.md build_original.tmp

     - name: Upload modules to release
       uses: svenstaro/upload-release-action@v2
       with:
         body: ${{ steps.get_output.outputs.BUILD_LOG }}
         repo_token: ${{ secrets.GITHUB_TOKEN }}
         file: ./build/*
         release_name: rufusin ReVanced Modules
         tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
         file_glob: true
         overwrite: true

     - name: Update changelog and Magisk update json
       id: update_config
       run: |
         git checkout -f update || git switch --discard-changes --orphan update
         cp -f build_original.tmp build_original.md
         get_update_json() {
           echo "{
           \"version\": \"$1\",
           \"versionCode\": ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }},
           \"zipUrl\": \"$2\",
           \"changelog\": \"https://raw.githubusercontent.com/${{ github.repository }}/update/build_original.md\"
         }"
         }

         cd build || { echo "build folder not found"; exit 1; }
         for OUTPUT in *magisk*.zip; do
           [ "$OUTPUT" = "*magisk*.zip" ] && continue
           ZIP_S=$(unzip -p "$OUTPUT" module.prop)
           if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
           UPDATE_JSON="${UPDATE_JSON##*/}"
           VER=$(echo "$ZIP_S" | grep version=)
           VER="${VER##*=}"
           DLURL="${{ github.server_url }}/${{ github.repository }}/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
           get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
         done
         cd ..

         find . -name "*-original-update.json" | grep . || : >dummy-update.json

     - name: Update git
       run: |
         git fetch origin update
         git pull origin update

     - uses: stefanzweifel/git-auto-commit-action@v5
       with:
         branch: update
         skip_fetch: false
         skip_checkout: false
         file_pattern: build_original.md *-original-update.json
         commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

 build_rvxb:
    # needs: build_modules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"
        
      - name: Update config
        if: ${{ inputs.from_ci }}
        run: |
          if git checkout origin/update build.md; then
            UPDATE_CFG=$(./build.sh config_rvxb.toml --config-update)
            if [ "$UPDATE_CFG" ]; then
              echo "$UPDATE_CFG" > config_rvxb.toml
            fi
          fi

      - name: Get next version code
        id: next_ver_code
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
          if [ -z "$TAG" ]; then TAG=0; fi
          echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT

      - name: Build modules/APKs
        run: ./build.sh config_rvxb.toml rvxb options_rvxb.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

      - name: Get output
        id: get_output
        run: |
          DELIM="$(openssl rand -hex 8)"
          echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
          cat build.md >> "$GITHUB_OUTPUT"
          echo "${DELIM}" >> "$GITHUB_OUTPUT"
          cp -f build.md build_rvxb.tmp

      - run: sleep 15

      - name: Upload modules to release
        uses: svenstaro/upload-release-action@v2
        with:
          body: ${{ steps.get_output.outputs.BUILD_LOG }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./build/*
          tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
          file_glob: true
          overwrite: true

      - name: Update changelog and Magisk update json
        id: update_config
        run: |
          git checkout -f update || git switch --discard-changes --orphan update
          cp -f build_rvxb.tmp build_rvxb.md
          get_update_json() {
            echo "{
            \"version\": \"$1\",
            \"versionCode\": ${{ steps.next_ver_code.outputs.NEXT_VER_CODE}},
            \"zipUrl\": \"$2\",
            \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/build_rvxb.md\"
          }"
          }

          cd build || { echo "build folder not found"; exit 1; }
          for OUTPUT in *magisk*.zip; do
            [ "$OUTPUT" = "*magisk*.zip" ] && continue
            ZIP_S=$(unzip -p "$OUTPUT" module.prop)
            if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
            UPDATE_JSON="${UPDATE_JSON##*/}"
            VER=$(echo "$ZIP_S" | grep version=)
            VER="${VER##*=}"
            DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
            get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
          done
          cd ..
          find . -name "*-rufusin-update.json" | grep . || : >dummy-update.json

      - name: Update git
        run: |
          git fetch origin update
          git pull origin update

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: update
          skip_fetch: false
          skip_checkout: false
          file_pattern: build_rvxb.md *-rvxb-update.json
          commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
 build_rvxr:
  #  needs: build_rvxb
   runs-on: ubuntu-latest
   steps:
     - name: Checkout
       uses: actions/checkout@v4
       with:
         fetch-depth: 0
         submodules: true

     - name: Set up Java
       uses: actions/setup-java@v4
       with:
         distribution: "zulu"
         java-version: "17"

     - name: Update config
       if: ${{ inputs.from_ci }}
       run: |
         if git checkout origin/update build_rvxr.md; then
           UPDATE_CFG=$(./build.sh config_rvxr.toml --config-update)
           if [ "$UPDATE_CFG" ]; then
             echo "$UPDATE_CFG" > config_rvxr.toml
           fi
         fi

     - name: Get next version code
       id: next_ver_code
       env:
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
         TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
         if [ -z "$TAG" ]; then TAG=0; fi
         echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT

     - name: Build modules/APKs
       run: ./build.sh config_rvxr.toml rvxr options_rvxr.json
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         GITHUB_REPOSITORY: ${{ github.repository }}
         NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

     - name: Get output
       id: get_output
       run: |
         DELIM="$(openssl rand -hex 8)"
         echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
         cat build.md >> "$GITHUB_OUTPUT"
         echo "${DELIM}" >> "$GITHUB_OUTPUT"
         cp -f build.md build_rvxr.tmp

     - run: sleep 25

     - name: Upload modules to release
       uses: svenstaro/upload-release-action@v2
       with:
         body: ${{ steps.get_output.outputs.BUILD_LOG }}
         repo_token: ${{ secrets.GITHUB_TOKEN }}
         file: ./build/*
         tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
         file_glob: true
         overwrite: true

     - name: Update changelog and Magisk update json
       id: update_config
       run: |
         git checkout -f update || git switch --discard-changes --orphan update
         cp -f build_rvxr.tmp build_rvxr.md
         get_update_json() {
           echo "{
           \"version\": \"$1\",
           \"versionCode\": ${{ steps.next_ver_code.outputs.NEXT_VER_CODE}},
           \"zipUrl\": \"$2\",
           \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/build_rvxr.md\"
         }"
         }

         cd build || { echo "build folder not found"; exit 1; }
         for OUTPUT in *magisk*.zip; do
           [ "$OUTPUT" = "*magisk*.zip" ] && continue
           ZIP_S=$(unzip -p "$OUTPUT" module.prop)
           if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
           UPDATE_JSON="${UPDATE_JSON##*/}"
           VER=$(echo "$ZIP_S" | grep version=)
           VER="${VER##*=}"
           DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
           get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
         done
         cd ..

         find . -name "*-rvxr-update.json" | grep . || : >dummy-update.json

     - name: Update git
       run: |
         git fetch origin update
         git pull origin update

     - uses: stefanzweifel/git-auto-commit-action@v5
       with:
         branch: update
         skip_fetch: false
         skip_checkout: false
         file_pattern: build_rvxr.md *-rvxr-update.json
         commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
 build_rvxab:
  #  needs: build_rvxr
   runs-on: ubuntu-latest
   steps:
     - name: Checkout
       uses: actions/checkout@v4
       with:
         fetch-depth: 0
         submodules: true

     - name: Set up Java
       uses: actions/setup-java@v4
       with:
         distribution: "zulu"
         java-version: "17"

     - name: Update config
       if: ${{ inputs.from_ci }}
       run: |
         if git checkout origin/update build_rvxab.md; then
           UPDATE_CFG=$(./build.sh config_rvxab.toml --config-update)
           if [ "$UPDATE_CFG" ]; then
             echo "$UPDATE_CFG" > config_rvxab.toml
           fi
         fi
      
     - name: Get next version code
       id: next_ver_code
       env:
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
         TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
         if [ -z "$TAG" ]; then TAG=0; fi
         echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT

     - name: Build modules/APKs
       run: ./build.sh config_rvxab.toml rvxab options_rvxab.json
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         GITHUB_REPOSITORY: ${{ github.repository }}
         NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

     - name: Get output
       id: get_output
       run: |
         DELIM="$(openssl rand -hex 8)"
         echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
         cat build.md >> "$GITHUB_OUTPUT"
         echo "${DELIM}" >> "$GITHUB_OUTPUT"
         cp -f build.md build_rvxab.tmp

     - run: sleep 35

     - name: Upload modules to release
       uses: svenstaro/upload-release-action@v2
       with:
         body: ${{ steps.get_output.outputs.BUILD_LOG }}
         repo_token: ${{ secrets.GITHUB_TOKEN }}
         file: ./build/*
         tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
         file_glob: true
         overwrite: true

     - name: Update changelog and Magisk update json
       id: update_config
       run: |
         git checkout -f update || git switch --discard-changes --orphan update
         cp -f build_rvxab.tmp build_rvxab.md
         get_update_json() {
           echo "{
           \"version\": \"$1\",
           \"versionCode\": ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }},
           \"zipUrl\": \"$2\",
           \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/build_rvxab.md\"
         }"
         }

         cd build || { echo "build folder not found"; exit 1; }
         for OUTPUT in *magisk*.zip; do
           [ "$OUTPUT" = "*magisk*.zip" ] && continue
           ZIP_S=$(unzip -p "$OUTPUT" module.prop)
           if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
           UPDATE_JSON="${UPDATE_JSON##*/}"
           VER=$(echo "$ZIP_S" | grep version=)
           VER="${VER##*=}"
           DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
           get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
         done
         cd ..

         find . -name "*-rvxab-update.json" | grep . || : >dummy-update.json

     - name: Update git
       run: |
        git fetch origin update
        git pull origin update

     - uses: stefanzweifel/git-auto-commit-action@v5
       with:
         branch: update
         skip_fetch: false
         skip_checkout: false
         file_pattern: build_rvxab.md *-rvxab-update.json
         commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
 build_rvxar:
  #  needs: build_rvxab
   runs-on: ubuntu-latest
   steps:
     - name: Checkout
       uses: actions/checkout@v4
       with:
         fetch-depth: 0
         submodules: true

     - name: Set up Java
       uses: actions/setup-java@v4
       with:
         distribution: "zulu"
         java-version: "17"

     - name: Update config
       if: ${{ inputs.from_ci }}
       run: |
         if git checkout origin/update build_rvxar.md; then
           UPDATE_CFG=$(./build.sh config_rvxar.toml --config-update)
           if [ "$UPDATE_CFG" ]; then
             echo "$UPDATE_CFG" > config_rvxar.toml
           fi
         fi

     - name: Get next version code
       id: next_ver_code
       env:
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
         TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
         if [ -z "$TAG" ]; then TAG=0; fi
         echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT

     - name: Build modules/APKs
       run: ./build.sh config_rvxar.toml rvxar options_rvxar.json
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         GITHUB_REPOSITORY: ${{ github.repository }}
         NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

     - name: Get output
       id: get_output
       run: |
         DELIM="$(openssl rand -hex 8)"
         echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
         cat build.md >> "$GITHUB_OUTPUT"
         echo "${DELIM}" >> "$GITHUB_OUTPUT"
         cp -f build.md build_rvxar.tmp

     - run: sleep 45

     - name: Upload modules to release
       uses: svenstaro/upload-release-action@v2
       with:
         body: ${{ steps.get_output.outputs.BUILD_LOG }}
         repo_token: ${{ secrets.GITHUB_TOKEN }}
         file: ./build/*
         tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
         file_glob: true
         overwrite: true

     - name: Update changelog and Magisk update json
       id: update_config
       run: |
         git checkout -f update || git switch --discard-changes --orphan update
         cp -f build_rvxar.tmp build_rvxar.md
         get_update_json() {
           echo "{
           \"version\": \"$1\",
           \"versionCode\": ${{ steps.next_ver_code.outputs.NEXT_VER_CODE}},
           \"zipUrl\": \"$2\",
           \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/build_rvxar.md\"
         }"
         }

         cd build || { echo "build folder not found"; exit 1; }
         for OUTPUT in *magisk*.zip; do
           [ "$OUTPUT" = "*magisk*.zip" ] && continue
           ZIP_S=$(unzip -p "$OUTPUT" module.prop)
           if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
           UPDATE_JSON="${UPDATE_JSON##*/}"
           VER=$(echo "$ZIP_S" | grep version=)
           VER="${VER##*=}"
           DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
           get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
         done
         cd ..

         find . -name "*-rvxar-update.json" | grep . || : >dummy-update.json

     - name: Update git
       run: |
         git fetch origin update
         git pull origin update

     - uses: stefanzweifel/git-auto-commit-action@v5
       with:
         branch: update
         skip_fetch: false
         skip_checkout: false
         file_pattern: build_rvxar.md *-rvxar-update.json
         commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
 build_rvxm:
  #  needs: build_rvxar
   runs-on: ubuntu-latest
   steps:
     - name: Checkout
       uses: actions/checkout@v4
       with:
         fetch-depth: 0
         submodules: true

     - name: Set up Java
       uses: actions/setup-java@v4
       with:
         distribution: "zulu"
         java-version: "17"

     - name: Update config
       if: ${{ inputs.from_ci }}
       run: |
         if git checkout origin/update build_rvxm.md; then
           UPDATE_CFG=$(./build.sh config_rvxm.toml --config-update)
           if [ "$UPDATE_CFG" ]; then
             echo "$UPDATE_CFG" > config_rvxm.toml
           fi
         fi

     - name: Get next version code
       id: next_ver_code
       env:
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
         TAG=$(gh release list -L 1 | awk -F '\t' '{print $3}')
         if [ -z "$TAG" ]; then TAG=0; fi
         echo "NEXT_VER_CODE=$((TAG + 1))" >> $GITHUB_OUTPUT

     - name: Build modules/APKs
       run: ./build.sh config_rvxm.toml rvxm options_rvxm.json
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         GITHUB_REPOSITORY: ${{ github.repository }}
         NEXT_VER_CODE: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}

     - name: Get output
       id: get_output
       run: |
         DELIM="$(openssl rand -hex 8)"
         echo "BUILD_LOG<<${DELIM}" >> "$GITHUB_OUTPUT"
         cat build.md >> "$GITHUB_OUTPUT"
         echo "${DELIM}" >> "$GITHUB_OUTPUT"
         cp -f build.md build_rvxm.tmp

     - run: sleep 55

     - name: Upload modules to release
       uses: svenstaro/upload-release-action@v2
       with:
         body: ${{ steps.get_output.outputs.BUILD_LOG }}
         repo_token: ${{ secrets.GITHUB_TOKEN }}
         file: ./build/*
         tag: ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
         file_glob: true
         overwrite: true

     - name: Update changelog and Magisk update json
       id: update_config
       run: |
         git checkout -f update || git switch --discard-changes --orphan update
         cp -f build_rvxm.tmp build_rvxm.md
         get_update_json() {
           echo "{
           \"version\": \"$1\",
           \"versionCode\": ${{ steps.next_ver_code.outputs.NEXT_VER_CODE}},
           \"zipUrl\": \"$2\",
           \"changelog\": \"https://raw.githubusercontent.com/$GITHUB_REPOSITORY/update/build_rvxm.md\"
         }"
         }

         cd build || { echo "build folder not found"; exit 1; }
         for OUTPUT in *magisk*.zip; do
           [ "$OUTPUT" = "*magisk*.zip" ] && continue
           ZIP_S=$(unzip -p "$OUTPUT" module.prop)
           if ! UPDATE_JSON=$(echo "$ZIP_S" | grep updateJson); then continue; fi
           UPDATE_JSON="${UPDATE_JSON##*/}"
           VER=$(echo "$ZIP_S" | grep version=)
           VER="${VER##*=}"
           DLURL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}/${OUTPUT}"
           get_update_json "$VER" "$DLURL" >"../$UPDATE_JSON"
         done
         cd ..

         find . -name "*-rvxm-update.json" | grep . || : >dummy-update.json

     - name: Update git
       run: |
         git fetch origin update
         git pull origin update
    
     - uses: stefanzweifel/git-auto-commit-action@v5
       with:
        branch: update
        skip_fetch: false
        skip_checkout: false
        file_pattern: build_rvxm.md *-rvxm-update.json
        commit_message: Bump version ${{ steps.next_ver_code.outputs.NEXT_VER_CODE }}
